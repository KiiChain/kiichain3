# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Docker Integration Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  integration-tests:
    name: Integration Test (${{ matrix.test.name }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      DAPP_TESTS_MNEMONIC: "minimum frequent idea maid chase palm cargo repair inform cloud sense drift episode vintage parrot memory found earn relax scrap spider valve volume athlete"
    strategy:
      # other jobs should run even if one integration test fails
      fail-fast: false
      matrix:
        test: [
            {
              name: "Wasm Module",
              scripts:
                [
                  "docker exec kii-node-0 integration_test/contracts/deploy_timelocked_token_contract.sh",
                  "python3 integration_test/scripts/runner.py integration_test/wasm_module/timelocked_token_delegation_test.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/wasm_module/timelocked_token_admin_test.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/wasm_module/timelocked_token_withdraw_test.yaml",
                  "docker exec kii-node-0 integration_test/contracts/deploy_timelocked_token_contract.sh",
                  "python3 integration_test/scripts/runner.py integration_test/wasm_module/timelocked_token_emergency_withdraw_test.yaml",
                ],
            },
            {
              name: "Mint & Staking & Bank Module",
              scripts:
                [
                  "python3 integration_test/scripts/runner.py integration_test/staking_module/staking_test.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/bank_module/send_funds_test.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/mint_module/mint_test.yaml",
                ],
            },
            {
              name: "Gov & Oracle & Authz Module",
              scripts:
                [
                  "python3 integration_test/scripts/runner.py integration_test/gov_module/gov_proposal_test.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/gov_module/staking_proposal_test.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/oracle_module/verify_penalty_counts.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/oracle_module/set_feeder_test.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/authz_module/send_authorization_test.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/authz_module/staking_authorization_test.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/authz_module/generic_authorization_test.yaml",
                ],
            },
            {
              name: "Chain Operation Test",
              scripts:
                [
                  "until [ $(cat build/generated/rpc-launch.complete |wc -l) = 1 ]; do sleep 10; done",
                  "until [[ $(docker exec kii-rpc-node build/kiichaind status |jq -M -r .SyncInfo.latest_block_height) -gt 10 ]]; do sleep 10; done",
                  "echo rpc node started",
                  "python3 integration_test/scripts/runner.py integration_test/chain_operation/snapshot_operation.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/chain_operation/statesync_operation.yaml",
                ],
            },
            {
              name: "Distribution Module",
              scripts:
                [
                  "python3 integration_test/scripts/runner.py integration_test/distribution_module/community_pool.yaml",
                  "python3 integration_test/scripts/runner.py integration_test/distribution_module/rewards.yaml",
                ],
            },
            {
              name: "Upgrade Module (Major)",
              env: "UPGRADE_VERSION_LIST=v1.0.0,v1.0.1,v1.0.2",
              scripts:
                [
                  "python3 integration_test/scripts/runner.py integration_test/upgrade_module/major_upgrade_test.yaml",
                ],
            },
            {
              name: "Upgrade Module (Minor)",
              env: "UPGRADE_VERSION_LIST=v1.0.0,v1.0.1,v1.0.2",
              scripts:
                [
                  "python3 integration_test/scripts/runner.py integration_test/upgrade_module/minor_upgrade_test.yaml",
                ],
            },
            {
              name: "SeiDB State Store",
              scripts:
                [
                  "docker exec kii-node-0 integration_test/contracts/deploy_wasm_contracts.sh",
                  "docker exec kii-node-0 integration_test/contracts/create_tokenfactory_denoms.sh",
                  "python3 integration_test/scripts/runner.py integration_test/seidb/state_store_test.yaml",
                ],
            },
            # We must run these tests by hand before releases
            # {
            #   name: "EVM Module",
            #   scripts: [
            #     "./integration_test/evm_module/scripts/evm_tests.sh",
            #   ]
            # },
            # {
            #   name: "EVM Interoperability",
            #   scripts: [
            #     "./integration_test/evm_module/scripts/evm_interoperability_tests.sh"
            #   ]
            # },
            { name: "dApp Tests", scripts: [
                  "docker exec kii-node-0 integration_test/contracts/fund_daap_account.sh",
                  "./integration_test/dapp_tests/dapp_tests.sh local uniswap",
                  "./integration_test/dapp_tests/dapp_tests.sh local nft",
                  # This contract doesn't run with ukii
                  # "./integration_test/dapp_tests/dapp_tests.sh local steak",
                ] },
          ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Pyyaml
        run: |
          pip3 install pyyaml

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.22

      - name: Start 4 node docker cluster
        run: make clean && INVARIANT_CHECK_INTERVAL=10 ${{matrix.test.env}} make docker-cluster-start-integration &

      - name: Wait for docker cluster to start
        run: |
          until [ $(cat build/generated/launch.complete |wc -l) = 4 ]
          do
            sleep 10
          done
          sleep 10

      - name: Start rpc node
        run: make run-rpc-node-skipbuild-integration &

      - name: Verify Kii Chain is running
        run: python3 integration_test/scripts/runner.py integration_test/startup/startup_test.yaml

      - name: ${{ matrix.test.name }}
        run: |
          scripts=$(echo '${{ toJson(matrix.test.scripts) }}' | jq -r '.[]')
          IFS=$'\n'   # change the internal field separator to newline
          echo $scripts
          for script in $scripts
          do
            bash -c "${script}"
          done
          unset IFS  # revert the internal field separator back to default
